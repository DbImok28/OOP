// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lab11;

namespace lab11.Migrations
{
    [DbContext(typeof(DashCodeBDContext))]
    [Migration("20220502122427_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("lab11.ChatMessages", b =>
                {
                    b.Property<int>("ChatMessagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CHAT_MESSAGES_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId")
                        .HasColumnName("CHAT_ID")
                        .HasColumnType("int");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnName("MESSAGE_TEXT")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("SendDate")
                        .HasColumnName("SEND_DATE")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID")
                        .HasColumnType("int");

                    b.HasKey("ChatMessagesId");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("CHAT_MESSAGES");
                });

            modelBuilder.Entity("lab11.ChatUser", b =>
                {
                    b.Property<int>("ChatId")
                        .HasColumnName("CHAT_ID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID")
                        .HasColumnType("int");

                    b.HasKey("ChatId", "UserId")
                        .HasName("CHAT_USER_PK");

                    b.HasIndex("UserId");

                    b.ToTable("CHAT_USER");
                });

            modelBuilder.Entity("lab11.Chats", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CHAT_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.HasKey("ChatId")
                        .HasName("CHAT_ID_PK");

                    b.ToTable("CHATS");
                });

            modelBuilder.Entity("lab11.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USER_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnName("LOGIN")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("PASSWORD_HASH")
                        .HasColumnType("varbinary(20)")
                        .HasMaxLength(20);

                    b.Property<byte[]>("Photo")
                        .HasColumnName("PHOTO")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("UserId")
                        .HasName("USER_ID_PK");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasName("LOGIN_UN");

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("lab11.ChatMessages", b =>
                {
                    b.HasOne("lab11.Chats", "Chat")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatId")
                        .HasConstraintName("CHAT_MESSAGES_CHAT_ID_FK")
                        .IsRequired();

                    b.HasOne("lab11.Users", "User")
                        .WithMany("ChatMessages")
                        .HasForeignKey("UserId")
                        .HasConstraintName("CHAT_MESSAGES_USER_ID_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("lab11.ChatUser", b =>
                {
                    b.HasOne("lab11.Chats", "Chat")
                        .WithMany("ChatUser")
                        .HasForeignKey("ChatId")
                        .HasConstraintName("CHAT_USER_USER_FK")
                        .IsRequired();

                    b.HasOne("lab11.Users", "User")
                        .WithMany("ChatUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("CHAT_USER_CHAT_FK")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
